import random

import pymorphy3
import telebot

import menus
from const import *
from db import BotDB

bot = telebot.TeleBot(TOKEN)
morph = pymorphy3.MorphAnalyzer()
db = BotDB('data/users.db')


def update_subj(call):
    bot.send_message(call.message.chat.id,
                     '–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É' + '\n–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ',
                     reply_markup=menus.update_subj_menu)


def update_class(call):
    bot.edit_message_text('–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö\n–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ',
                          call.message.chat.id, call.message.message_id,
                          reply_markup=menus.update_class_menu)


def update_level(call):
    bot.edit_message_text('''–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã\n
1 —É—Ä–æ–≤–µ–Ω—å –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –í–£–ó –ë–í–ò.
2 —É—Ä–æ–≤–µ–Ω—å –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å 100 –±–∞–ª–ª–æ–≤ –ï–ì–≠ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –æ–ª–∏–º–ø–∏–¥—ã.
3 —É—Ä–æ–≤–µ–Ω—å –¥–∞–µ—Ç –ª—å–≥–æ—Ç—ã –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –í–£–ó–∞.\n
–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ''',
                          call.message.chat.id, call.message.message_id,
                          reply_markup=menus.olymp_levels_menu)

# !
def check_choose(call):
    if db.user_exists(call.from_user.id) and db.last_olymp_exist(call.from_user.id)[0] is not None:
        return True
    else:
        update_subj(call)
        return False

# 1
def olymp(call):
    if check_choose(call):
        user_subj = db.get_user_subj(call.from_user.id)
        user_class = db.get_user_class(call.from_user.id)
        user_level = db.get_user_level(call.from_user.id)
        try:
            if user_level == 0:
                olymp = OLYMPIADS[(OLYMPIADS['response'] == user_subj) & (OLYMPIADS['min_class'] <= user_class) & (
                        OLYMPIADS['max_class'] >= user_class)].sample()
            else:
                olymp = OLYMPIADS[(OLYMPIADS['response'] == user_subj) & (OLYMPIADS['min_class'] <= user_class) & (
                        OLYMPIADS['max_class'] >= user_class) & (
                                          OLYMPIADS['level'] == user_level)].sample()
            if db.last_olymp_exist(call.from_user.id):
                x = 0
                last_olymp = db.get_last_olymp(call.from_user.id)
                while list(olymp['name'])[0] == last_olymp and x < 40:
                    x += 1
                    if user_level == 0:
                        olymp = OLYMPIADS[
                            (OLYMPIADS['response'] == user_subj) & (OLYMPIADS['min_class'] <= user_class) & (
                                    OLYMPIADS['max_class'] >= user_class)].sample()
                    else:
                        olymp = OLYMPIADS[
                            (OLYMPIADS['response'] == user_subj) & (OLYMPIADS['min_class'] <= user_class) & (
                                    OLYMPIADS['max_class'] >= user_class) & (
                                    OLYMPIADS['level'] == user_level)].sample()

            # print(call.message)
            db.reset_last_olymp(call.from_user.id, list(olymp['name'])[0])

            # print(db.get_last_olymp(call.message.from_user.id))

            bot.send_message(call.message.chat.id,
                             OLYMP_TEXT_PART_1[random.randint(0, len(OLYMP_TEXT_PART_1) - 1)] + ' `' + olymp[
                                 'name'] + '` –ø–æ –ø—Ä–æ—Ñ–∏–ª—é ' + olymp[
                                 'profile'] + f'\n\n–ö–ª–∞—Å—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ: —Å {olymp["min_class"].to_string().split()[1]} –ø–æ {olymp["max_class"].to_string().split()[1]}' + f'\n\n–£—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã: {int(float(olymp["level"].to_string().split()[1]))}' + '\n\nüìò –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n' + f'¬∑ –ù–æ–º–µ—Ä –≤ –ø–µ—Ä–µ—á–Ω–µ –æ–ª–∏–º–ø–∏–∞–¥ - {int(float(olymp["num_in_list"].to_string().split()[1]))}' \
                             + f'\n¬∑ –ü—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {" ".join(olymp["prof_subject"].to_string().split()[1:])}' \
                             + f'\n¬∑ –≠—Ç–∞–ø—ã –æ–ª–∏–º–ø–∏–∞–¥—ã - {" ".join(olymp["stage"].to_string().split()[1:])}' \
                             + f'\n¬∑ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É - {olymp["link"].to_string().split()[1]}',
                             reply_markup=menus.olymp_menu, parse_mode='MARKDOWN', disable_web_page_preview=True)
        except:
            bot.send_message(call.message.chat.id,
                             f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É {'–ª—é–±–æ–≥–æ' if user_level == 0 else user_level} —É—Ä–æ–≤–Ω—è –ø–æ {morph.parse(user_subj)[0].inflect({'datv'}).word} –¥–ª—è {user_class} –∫–ª–∞—Å—Å–∞\n\n–ü–æ–º–µ–Ω—è–π –∫–ª–∞—Å—Å, –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                             reply_markup=menus.olymp_menu2)


def update_prof(message):
    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É' + '\n–ï–≥–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ',
                     reply_markup=menus.update_prof_menu)

# 1
def check_choose_random(call):
    # print(db.last_random_olymp_exist(call.from_user.id))
    # print(db.user_exists(call.from_user.id))
    if db.user_exists(call.from_user.id) and db.last_random_olymp_exist(call.from_user.id)[0] is not None:
        return True
    else:
        update_prof(call.message)
        return False

# 1
def random_olymp(call):
    if check_choose_random(call):
        user_prof = db.get_user_prof(call.from_user.id)
        if user_prof == '–õ—é–±–æ–π':
            rndm_olymp = OLYMPIADS.sample()
        else:
            rndm_olymp = OLYMPIADS[OLYMPIADS['response'].isin(RANDOM_PROF[user_prof])].sample()
        # rndm_olymp = OLYMPIADS.sample()
        bot.send_message(call.message.chat.id,
                         RANDOM_TEXT_PART_1[random.randint(0, len(RANDOM_TEXT_PART_1) - 1)] + ' `' + rndm_olymp[
                             'name'] + '` –ø–æ –ø—Ä–æ—Ñ–∏–ª—é ' + rndm_olymp[
                             'profile'] + f'\n\n–ö–ª–∞—Å—Å—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ: —Å {rndm_olymp["min_class"].to_string().split()[1]} –ø–æ {rndm_olymp["max_class"].to_string().split()[1]}' +
                         f'\n\n–£—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã: {int(float(rndm_olymp["level"].to_string().split()[1]))}' + '\n\nüìò –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n' + f'¬∑ –ù–æ–º–µ—Ä –≤ –ø–µ—Ä–µ—á–Ω–µ –æ–ª–∏–º–ø–∏–∞–¥ - {int(float(rndm_olymp["num_in_list"].to_string().split()[1]))}' \
                         + f'\n¬∑ –ü—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {" ".join(rndm_olymp["prof_subject"].to_string().split()[1:])}' \
                         + f'\n¬∑ –≠—Ç–∞–ø—ã –æ–ª–∏–º–ø–∏–∞–¥—ã - {" ".join(rndm_olymp["stage"].to_string().split()[1:])}' \
                         + f'\n¬∑ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É - {rndm_olymp["link"].to_string().split()[1]}',
                         reply_markup=menus.random_olymp_menu, parse_mode='MARKDOWN', disable_web_page_preview=True)


def menu(message):
    bot.edit_message_text(f'''üöÄ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥"\n
"–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥" –º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –∏–∑ –ü–µ—Ä–µ—á–Ω—è, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –Ω–∞—É–∫–∏ –∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!\n
–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n
‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ —Å–ª–µ–¥–∏ –∑–∞ –≤—Å–µ–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ https://vk.com/navigator_olympiad''',
                          message.chat.id, message.message_id,
                          reply_markup=menus.menu_menu, disable_web_page_preview=True)
    # bot.send_message(message.chat.id, )


def menu_send_message(message):
    bot.send_message(message.chat.id, f'''üöÄ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–µ–Ω—é "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥"\n
"–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥" –º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –∏–∑ –ü–µ—Ä–µ—á–Ω—è, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º –Ω–∞—É–∫–∏ –∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!\n
–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n
‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ —Å–ª–µ–¥–∏ –∑–∞ –≤—Å–µ–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ https://vk.com/navigator_olympiad''',
                     reply_markup=menus.menu_menu, disable_web_page_preview=True)


def levels(message):
    bot.edit_message_text(f'''–í—ã–¥–µ–ª—è—é—Ç—Å—è —Ç–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏ –æ–ª–∏–º–ø–∏–∞–¥:\n
‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ I —É—Ä–æ–≤–Ω—è ‚Äî –Ω–µ –º–µ–Ω–µ–µ 3 —Ç—ã—Å—è—á —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ 20 –∏ –±–æ–ª–µ–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏, –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö –ª–µ—Ç. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –í–£–ó –±–µ–∑ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π\n
‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ II —É—Ä–æ–≤–Ω—è ‚Äî 1,5 —Ç—ã—Å—è—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ 10 –∏ –±–æ–ª–µ–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å 100 –±–∞–ª–ª–æ–≤ –ï–ì–≠ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –æ–ª–∏–º–ø–∏–∞–¥—ã\n
‚Ä¢ –û–ª–∏–º–ø–∏–∞–¥–∞ III —É—Ä–æ–≤–Ω—è ‚Äî 1,5 —Ç—ã—Å—è—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç—Ä—ë—Ö –∏ –±–æ–ª–µ–µ —Ä–µ–≥–∏–æ–Ω–æ–≤ –†–æ—Å—Å–∏–∏. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –ø—Ä–∏–∑–µ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—å–≥–æ—Ç—ã –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –í–£–ó–∞\n\n
–í –æ—Å–Ω–æ–≤–Ω–æ–º –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–µ–ª—è—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:\n
‚Ä¢ –û–¥–∏–Ω –∏–ª–∏ –¥–≤–∞ –æ—Ç–±–æ—Ä–æ—á–Ω—ã—Ö —ç—Ç–∞–ø–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ\n
‚Ä¢ –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ç–∞–ø, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—á–Ω–æ''',
                          message.chat.id, message.message_id,
                          reply_markup=menus.levels_menu)


def how_prepare(message):
    bot.edit_message_text('''–î–æ –Ω–∞—á–∞–ª–∞ –æ–ª–∏–º–ø–∏–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–µ–±–µ:\n
‚Ä¢ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ —É—Å–ª–æ–≤–∏—è–º–∏ —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–µ\n
‚Ä¢ –ò–∑—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö –ª–µ—Ç\n
‚Ä¢ –ü–æ—Å–µ—â–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ\n
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ –æ—Ç–¥—ã—Ö –∏ —Å–ø–æ—Ä—Ç\n\n
–í–æ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:\n
‚Ä¢ –†–∞–±–æ—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ\n
‚Ä¢ –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –Ω–µ—Ä–≤–Ω–∏—á–∞—Ç—å –∏ –ø–∏—Å–∞—Ç—å —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ''',
                          message.chat.id, message.message_id,
                          reply_markup=menus.prepare_menu)
    # bot.send_message(message.chat.id, , reply_markup=help_menu)


def advantages(message):
    bot.edit_message_text('''–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç —É—á–∞—Å—Ç–∏—è –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö:
‚Ä¢ –õ—å–≥–æ—Ç—ã –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–∑—ë—Ä–æ–≤ –æ–ª–∏–º–ø–∏–∞–¥ (–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "üî• –£—Ä–æ–≤–Ω–∏, —ç—Ç–∞–ø—ã –∏ –ª—å–≥–æ—Ç—ã")\n
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è —É–∑–Ω–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ\n
‚Ä¢ –£–º–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –º—ã—Å–ª–∏—Ç—å\n
‚Ä¢ –£–º–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—É–∂–¥–∞—Ç—å\n
‚Ä¢ –£–º–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è''',
                          message.chat.id, message.message_id,
                          reply_markup=menus.advantages_menu)

# 1
def set_subj(call, subj):
    # print(db.user_exists(call.from_user.id))
    if db.user_exists(call.from_user.id):
        db.set_user_subj(call.from_user.id, subj)
    else:
        db.add_user(call.from_user.id, call.from_user.username, subj)
    bot.answer_callback_query(call.id, text="–ü—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞–Ω")
    update_class(call)

# 1
def set_class(call, user_class):
    db.set_user_class(call.from_user.id, user_class)
    bot.answer_callback_query(call.id, text="–ö–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    update_level(call)

# 1
def set_level(call, user_level):
    db.set_user_level(call.from_user.id, user_level)
    bot.answer_callback_query(call.id, text="–£—Ä–æ–≤–µ–Ω—å –≤—ã–±—Ä–∞–Ω")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.edit_message_text('‚úÖ –ü—Ä–µ–¥–º–µ—Ç, –∫–ª–∞—Å—Å –∏ —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã',
                          call.message.chat.id, call.message.message_id,
                          reply_markup=None)
    db.del_last_olymp(call.from_user.id)
    olymp(call)

# 1
def set_prof(call, prof):
    if db.user_exists(call.from_user.id):
        db.set_user_prof(call.from_user.id, prof)
    else:
        db.add_user_from_prof(call.from_user.id, call.from_user.username, prof)
    bot.answer_callback_query(call.id, text="–ü—Ä–æ—Ñ–∏–ª—å –≤—ã–±—Ä–∞–Ω")
    bot.edit_message_text('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω',
                          call.message.chat.id, call.message.message_id,
                          reply_markup=None)
    random_olymp(call)


def admin_get_users(users):
    out = []
    for i in users:
        out.append(
            str(i[0]) + ' ' + str(i[1]) + ' @' + i[2] + ' ' + i[3] + ' ' + str(i[4]) + ' ' + str(i[5]) + ' ' + i[7])
    return out


def admin_check_text(message):
    bot.send_message(message.chat.id,
                     f'–¢—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç {db.get_users_count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n' + message.text,
                     reply_markup=menus.admin_send_text)
    db.add_admin_text(message.from_user.id, message.from_user.username, message.text)


def admin_confirmation_text(message):
    bot.edit_message_text(
        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ {db.get_users_count()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n' + db.get_last_admin_text()[3],
        message.chat.id, message.message_id, reply_markup=menus.admin_confirmation_text)


def admin_send_text(message):
    bot.edit_message_text('–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª–∞—Å—å', message.chat.id, message.message_id,
                          reply_markup=menus.go_out_menu)
    db.set_admin_text_status(db.get_last_admin_text()[0])

    for user in db.get_users_list():
        try:
            bot.send_message(user[1],
                             'üîî –¢–µ–±–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥"\n\n' +
                             db.get_last_admin_text()[3])
        except:
            pass


def send_message_tech_support(message):
    bot.send_message(message.chat.id,
                     f'–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å:\n{message.text}\n\n–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç')
    db.add_user_text(message.chat.id, message.from_user.username, message.text)
    send_answer_support = menus.get_ans_for_user(db.get_last_question_id()[0])
    bot.send_message(SUPPORT_CHAT_ID, f'''‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
user: @{message.from_user.username}
–≤–æ–ø—Ä–æ—Å: {message.text}''', reply_markup=send_answer_support)
    menu_send_message(message)


def send_answer_to_user(message, id):
    user_id = db.get_user_id_from_question_id(id)[0]
    db.add_admin_ans(id, message.from_user.username, message.text)
    question = db.get_user_question_text(id)
    bot.send_message(user_id, f'''üîî –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n
‚ùì –í–æ–ø—Ä–æ—Å: {question}\n
‚ùóÔ∏è –û—Ç–≤–µ—Ç: {message.text}''')
    bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, text=f"{START_TEXT[random.randint(0, len(START_TEXT) - 1)]}",
                     reply_markup=menus.start_menu)


@bot.message_handler(commands=['can'])
def can(message):
    bot.send_message(message.chat.id, text=f"""–Ø –º–æ–≥—É:
¬∑ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ —Ç–≤–æ–µ–º—É –ª—é–±–∏–º–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
¬∑ –ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É
¬∑ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —É—Ä–æ–≤–Ω–∏, —ç—Ç–∞–ø—ã –∏ –ª—å–≥–æ—Ç—ã –±—ã–≤–∞—é—Ç —É –æ–ª–∏–º–ø–∏–∞–¥ –∏ —á–µ–º –æ–Ω–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
¬∑ –î–∞—Ç—å —Å–æ–≤–µ—Ç, –∫–∞–∫ –ª—É—á—à–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –æ–ª–∏–º–ø–∏–∞–¥–∞–º –∏ —Ä–µ—à–∞—Ç—å –∏—Ö
¬∑ –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö""",
                     reply_markup=menus.help_menu)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, text=f'''–≠—Ç–æ - –±–æ—Ç "–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥"! \n
–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∏ –∫–ª–∞—Å—Å—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!
–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, —Ç–æ —è –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É
–ü–æ—Å–ª–µ –ø–æ–¥–±–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã —Ç—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ - —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–î–µ—Ç–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã" –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ—â—ë –æ–¥–Ω—É –æ–ª–∏–º–ø–∏–∞–¥—É\n\n
–ê –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —É—Ä–æ–≤–Ω—è–º–∏ –æ–ª–∏–º–ø–∏–∞–¥, –¥–∞–º —Å–æ–≤–µ—Ç, –∫–∞–∫ –ª—É—á—à–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è, –∏ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ä–µ—à–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—ã\n
–°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ https://vk.com/navigator_olympiad''',
                     reply_markup=menus.help_menu)


@bot.message_handler(commands=['support'])
def message_to_support(message):
    bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞',
                     reply_markup=menus.send_message_to_support_menu)


@bot.message_handler(commands=['admin'])
def admin(message):
    # bot.send_message(message.chat.id, message.from_user.id)
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, f'''Admin –ø–∞–Ω–µ–ª—å
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - `{db.get_users_count()}`
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ª–∏–º–ø–∏–∞–¥ - `{len(OLYMPIADS)}`''', reply_markup=menus.admin_menu, parse_mode='MARKDOWN')
    else:
        bot.send_message(message.chat.id,
                         '–¢–µ–±—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞',
                         reply_markup=menus.help_menu)


@bot.message_handler(
    content_types=["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location",
                   "contact"])
def not_command(message):
    bot.send_message(message.chat.id, '–Ø –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è –ø–æ–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ',
                     reply_markup=menus.not_text_menu)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    if call.data == 'menu':
        menu(call.message)
    if call.data == 'menu_send_message':
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        menu_send_message(call.message)
    elif call.data == 'help':
        help(call.message)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == 'olymp':
        olymp(call)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == 'random_olymp_menu':
        random_olymp(call)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == 'levels':
        levels(call.message)
    elif call.data == 'how_prepare':
        how_prepare(call.message)
    elif call.data == 'advantages':
        advantages(call.message)
    elif call.data == 'update':
        update_subj(call)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    elif call.data == 'update_prof':
        update_prof(call.message)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

    elif call.data == 'astronomy':
        set_subj(call, '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è')
    elif call.data == 'business':
        set_subj(call, '–±–∏–∑–Ω–µ—Å')
    elif call.data == 'biology':
        set_subj(call, '–±–∏–æ–ª–æ–≥–∏—è')
    elif call.data == 'geography':
        set_subj(call, '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è')
    elif call.data == 'journalism':
        set_subj(call, '–∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞')
    elif call.data == 'art':
        set_subj(call, '–∏—Å–∫—É—Å—Å—Ç–≤–æ')
    elif call.data == 'foreign_lang':
        set_subj(call, '–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫')
    elif call.data == 'informatics':
        set_subj(call, '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞')
    elif call.data == 'history':
        set_subj(call, '–∏—Å—Ç–æ—Ä–∏—è')
    elif call.data == 'literature':
        set_subj(call, '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
    elif call.data == 'math':
        set_subj(call, '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
    elif call.data == 'music':
        set_subj(call, '–º—É–∑—ã–∫–∞')
    elif call.data == 'social':
        set_subj(call, '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ')
    elif call.data == 'law':
        set_subj(call, '–ø—Ä–∞–≤–æ')
    elif call.data == 'russian_lang':
        set_subj(call, '—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫')
    elif call.data == 'sociology':
        set_subj(call, '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è')
    elif call.data == 'physics':
        set_subj(call, '—Ñ–∏–∑–∏–∫–∞')
    elif call.data == 'chemistry':
        set_subj(call, '—Ö–∏–º–∏—è')
    elif call.data == 'economy':
        set_subj(call, '—ç–∫–æ–Ω–æ–º–∏–∫–∞')
    elif call.data == 'linguistics':
        set_subj(call, '–ª–∏–Ω–≥–≤–∏—Å—Ç–∏–∫–∞')
    elif call.data == 'technology':
        set_subj(call, '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è')
    elif call.data == 'Technical_sciences':
        set_prof(call, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—É–∫–∏')
    elif call.data == 'Natural_sciences':
        set_prof(call, '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏')
    elif call.data == 'Social_Sciences':
        set_prof(call, '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—É–∫–∏')
    elif call.data == 'Humanities':
        set_prof(call, '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –Ω–∞—É–∫–∏')
    elif call.data == 'Creation':
        set_prof(call, '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ')
    elif call.data == 'any_profile':
        set_prof(call, '–õ—é–±–æ–π')

    elif call.data == '2':
        set_class(call, 2)
    elif call.data == '3':
        set_class(call, 3)
    elif call.data == '4':
        set_class(call, 4)
    elif call.data == '5':
        set_class(call, 5)
    elif call.data == '6':
        set_class(call, 6)
    elif call.data == '7':
        set_class(call, 7)
    elif call.data == '8':
        set_class(call, 8)
    elif call.data == '9':
        set_class(call, 9)
    elif call.data == '10':
        set_class(call, 10)
    elif call.data == '11':
        set_class(call, 11)

    elif call.data == 'level_1':
        set_level(call, 1)
    elif call.data == 'level_2':
        set_level(call, 2)
    elif call.data == 'level_3':
        set_level(call, 3)
    elif call.data == 'level_0':
        set_level(call, 0)


    elif call.data == 'admin_get_db':
        bot.send_document(call.message.chat.id, open('data/users.db', 'rb'))
    elif call.data == 'admin_20_users':
        bot.send_message(call.message.chat.id, '\n'.join(admin_get_users(db.get_users_list()[:20])))
    elif call.data == 'admin_all_users':
        bot.send_message(call.message.chat.id, '\n'.join(admin_get_users(db.get_users_list())))
    elif call.data == 'admin_start_message':
        mesg = bot.edit_message_text('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', call.message.chat.id,
                                     call.message.message_id)
        bot.register_next_step_handler(mesg, admin_check_text)
    elif call.data == 'admin_no':
        menu(call.message)
    elif call.data == 'admin_yes':
        admin_confirmation_text(call.message)
    elif call.data == 'admin_yes_yes':
        admin_send_text(call.message)

    elif call.data == 'write_technical_support':
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        mesg = bot.send_message(call.message.chat.id,
                                '–ù–∞–ø–∏—à–∏ –Ω–∏–∂–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ. –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è',
                                reply_markup=menus.go_out_menu)
        bot.register_next_step_handler(mesg, send_message_tech_support)
    elif 'write_technical_support_' in call.data:
        id = call.data[24:]
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        mesg = bot.send_message(call.message.chat.id,
                                '–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∏–∂–µ')
        bot.register_next_step_handler(mesg, send_answer_to_user, id)


bot.polling(non_stop=True)
